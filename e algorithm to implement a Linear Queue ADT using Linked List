adt queue for linked list
algorithm
Here's the algorithm to implement a Linear Queue ADT using Linked List, as extracted from your lab journal:

Algorithm: Linear Queue Using Linked List

Step 1:

Include necessary header files and declare all user-defined functions.

Step 2:

Define a Node structure with two members: data and next.

Step 3:

Define two node pointers: front and rear, and initialize both to NULL.

Step 4:

Implement the main() function, display a menu of operations, and make appropriate function calls based on the user's choice.

enQueue(value) – Insert an element

1. Create a new node newNode with the given value and set newNode → next = NULL.

2. If the queue is empty (rear == NULL), set both front and rear to newNode.

3. Otherwise, set rear → next = newNode and update rear = newNode.

deQueue() – Delete an element

1. If the queue is empty (front == NULL), display a message and exit.


2. Else, set a temp node pointer temp = front.


3. Move front to the next node: front = front → next.


4. Delete temp.
display() – Show elements

1. If the queue is empty (front == NULL), display a message and exit.

2. Otherwise, set temp = front.

3. While temp → next != NULL, display temp → data ---> and move to temp → next.


4. After the loop, display the last node's data followed by ---> NULL.

Let me know if you'd like the full program code or viva questions based on this experiment!

program

#include <stdio.h>
#include <stdlib.h>

// Define a node structure
struct Node {
    int data;
    struct Node* next;
};

// Initialize front and rear pointers
struct Node* front = NULL;
struct Node* rear = NULL;

// Function to insert an element into the queue
void enQueue(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    
    if (rear == NULL) {
        front = rear = newNode;
    } else {
        rear->next = newNode;
        rear = newNode;
    }
    printf("Inserted %d into the queue.\n", value);
}

// Function to delete an element from the queue
void deQueue() {
    if (front == NULL) {
        printf("Queue is Empty!!! Deletion is not possible!!!\n");
        return;
    }
    struct Node* temp = front;
    front = front->next;
    if (front == NULL) rear = NULL;
    printf("Deleted: %d\n", temp->data);
    free(temp);
}

// Function to display the elements of the queue
void display() {
    if (front == NULL) {
        printf("Queue is Empty!!!\n");
        return;
    }
    struct Node* temp = front;
    printf("Queue elements: ");
    while (temp != NULL) {
        printf("%d ---> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    int choice, value;
    
    while (1) {
        printf("\nQueue Operations Menu:\n");
        printf("1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
        case 1:
            printf("Enter value to insert: ");
            scanf("%d", &value);
            enQueue(value);
            break;
        case 2:
            deQueue();
            break;
        case 3:
            display();
            break;
        case 4:
            printf("Exiting...\n");
            exit(0);
        default:
            printf("Invalid Choice!\n");
        }
    }

    return 0;
}

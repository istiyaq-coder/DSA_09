Here is the algorithm extracted from your experiment for implementing Stack ADT using Linked List:



Algorithm: Stack using Linked List

1. push(value) – Inserting an element

1. Create a new node with the given value.


2. If the stack is empty (top == NULL):

Set newNode → next = NULL.



3. Else:

Set newNode → next = top.



4. Set top = newNode.



2. pop() – Deleting an element

1. If the stack is empty (top == NULL):

Display "Stack is Empty!!! Deletion is not possible!!!"

Terminate the function.

2. Else:

Set a temporary pointer temp = top.

Set top = top → next.

Delete temp.

3. display() – Displaying elements

1. If the stack is empty (top == NULL):

Display "Stack is Empty!!!"

Terminate the function.



2. Else:

Set a temporary pointer temp = top.

While temp → next != NULL:

Print temp → data --->

Move temp = temp → next


Print the last node's data followed by NULL.
Let me know if you also want the pseudocode or implementation in C/C++.
  
program
#include <stdio.h>
#include <stdlib.h>

// Define node structure
struct Node {
    int data;
    struct Node* next;
};

// Initialize top of the stack
struct Node* top = NULL;

// Function to push an element to the stack
void push(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed!\n");
        return;
    }
    newNode->data = value;
    newNode->next = top;
    top = newNode;
    printf("%d pushed to stack\n", value);
}

// Function to pop an element from the stack
void pop() {
    if (top == NULL) {
        printf("Stack is Empty!!! Deletion is not possible!!!\n");
        return;
    }
    struct Node* temp = top;
    printf("%d popped from stack\n", top->data);
    top = top->next;
    free(temp);
}

// Function to display the stack
void display() {
    if (top == NULL) {
        printf("Stack is Empty!!!\n");
        return;
    }
    struct Node* temp = top;
    printf("Stack elements are: ");
    while (temp != NULL) {
        printf("%d ---> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    int choice, value;

    while (1) {
        printf("\n--- Stack Menu ---\n");
        printf("1. Push\n2. Pop\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to push: ");
                scanf("%d", &value);
                push(value);
                break;
            case 2:
                pop();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice! Try again.\n");
        }
    }
    return 0;
}
